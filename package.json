const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 3001;
const JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-for-testing';

// Middleware
app.use(cors());
app.use(express.json());

// Database setup
let pool = null;

async function initializeDatabase() {
  try {
    if (!process.env.DATABASE_URL) {
      console.log('⚠️ No DATABASE_URL found, running without database');
      return;
    }

    const { Pool } = require('pg');
    
    pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });

    // Test connection
    const client = await pool.connect();
    console.log('✅ Database connected successfully');

    // Create users table
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        company VARCHAR(255) NOT NULL,
        employee_id VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Create admin user if doesn't exist
    const adminCheck = await client.query('SELECT id FROM users WHERE email = $1', ['admin@securitytraining.com']);
    
    if (adminCheck.rows.length === 0) {
      const adminPassword = await bcrypt.hash('admin123', 10);
      await client.query(`
        INSERT INTO users (first_name, last_name, email, password_hash, company, employee_id)
        VALUES ($1, $2, $3, $4, $5, $6)
      `, ['Admin', 'User', 'admin@securitytraining.com', adminPassword, 'System', 'ADMIN001']);
      
      console.log('✓ Admin user created: admin@securitytraining.com / admin123');
    }

    client.release();
    console.log('✅ Database setup complete');

  } catch (error) {
    console.error('❌ Database setup error:', error.message);
    console.log('🔄 Server will continue running...');
  }
}

// Initialize database on startup
initializeDatabase();

// Helper function
function checkDatabase(req, res, next) {
  if (!pool) {
    return res.status(503).json({ error: 'Database not available' });
  }
  next();
}

// Routes

app.get('/', (req, res) => {
  res.json({ 
    message: 'Security Training API is running!',
    version: '4.0 - With PostgreSQL Database',
    database: pool ? 'Connected' : 'Not connected',
    timestamp: new Date().toISOString()
  });
});

app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK',
    database: pool ? 'Connected' : 'Not connected',
    timestamp: new Date().toISOString()
  });
});

// Authentication middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Invalid or expired token' });
    }
    req.user = user;
    next();
  });
};

// Register with database
app.post('/api/register', checkDatabase, async (req, res) => {
  const client = await pool.connect();
  
  try {
    const { firstName, lastName, email, password, company, employeeId } = req.body;

    // Validation
    if (!firstName || !lastName || !email || !password || !company || !employeeId) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    if (password.length < 6) {
      return res.status(400).json({ error: 'Password must be at least 6 characters' });
    }

    // Check if user exists
    const existingUser = await client.query('SELECT id FROM users WHERE email = $1', [email]);
    if (existingUser.rows.length > 0) {
      return res.status(400).json({ error: 'User with this email already exists' });
    }

    // Hash password and create user
    const passwordHash = await bcrypt.hash(password, 10);
    
    const result = await client.query(`
      INSERT INTO users (first_name, last_name, email, password_hash, company, employee_id)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id, first_name, last_name, email, company, employee_id
    `, [firstName, lastName, email, passwordHash, company, employeeId]);

    const user = result.rows[0];
    const token = jwt.sign({ userId: user.id, email: user.email }, JWT_SECRET, { expiresIn: '7d' });

    res.status(201).json({
      message: 'User created successfully',
      user: {
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        email: user.email,
        company: user.company,
        employeeId: user.employee_id
      },
      token
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ error: 'Server error during registration' });
  } finally {
    client.release();
  }
});

// Login with database
app.post('/api/login', checkDatabase, async (req, res) => {
  const client = await pool.connect();
  
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }

    const result = await client.query('SELECT * FROM users WHERE email = $1', [email]);

    if (result.rows.length === 0) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    const user = result.rows[0];
    const passwordMatch = await bcrypt.compare(password, user.password_hash);

    if (!passwordMatch) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    const token = jwt.sign({ userId: user.id, email: user.email }, JWT_SECRET, { expiresIn: '7d' });

    res.json({
      message: 'Login successful',
      user: {
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        email: user.email,
        company: user.company,
        employeeId: user.employee_id
      },
      token
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Server error during login' });
  } finally {
    client.release();
  }
});

// Protected profile route
app.get('/api/profile', authenticateToken, checkDatabase, async (req, res) => {
  const client = await pool.connect();
  
  try {
    const result = await client.query('SELECT * FROM users WHERE id = $1', [req.user.userId]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }

    const user = result.rows[0];
    res.json({
      user: {
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        email: user.email,
        company: user.company,
        employeeId: user.employee_id
      }
    });
  } catch (error) {
    console.error('Profile error:', error);
    res.status(500).json({ error: 'Failed to fetch profile' });
  } finally {
    client.release();
  }
});

// Debug route
app.get('/api/debug', checkDatabase, async (req, res) => {
  const client = await pool.connect();
  
  try {
    const result = await client.query('SELECT COUNT(*) as count FROM users');
    
    res.json({
      database_connected: !!pool,
      database_url_set: !!process.env.DATABASE_URL,
      jwt_secret_set: !!process.env.JWT_SECRET,
      total_users: result.rows[0].count,
      environment: process.env.NODE_ENV
    });
  } catch (error) {
    res.json({
      database_connected: !!pool,
      database_error: error.message
    });
  } finally {
    client.release();
  }
});

// Start server
app.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 Server running on port ${PORT}`);
  console.log(`🗄️ Database: ${pool ? 'Connected' : 'Not connected'}`);
  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
});

console.log('Step 4: Server with PostgreSQL starting...');